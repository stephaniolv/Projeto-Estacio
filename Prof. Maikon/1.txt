Importamos o módulo tkinter e as funções matemáticas do módulo math.
Criamos a janela principal usando tk.Tk().
Criamos a área de exibição usando tk.Entry.
Definimos funções para atualizar a área de exibição (update_display), avaliar a expressão (evaluate) e limpar a área de exibição (clear).
Criamos uma lista de botões, incluindo números, operadores matemáticos e funções trigonométricas.
Criamos os botões usando tk.Button e os posicionamos na janela usando grid.
Atribuímos os comandos apropriados a cada botão usando command=.
Iniciamos o loop principal da interface gráfica com root.mainloop().

Ao executar este código, você terá uma calculadora de engenharia com uma área de exibição e botões para números, operadores matemáticos e funções trigonométricas. Você pode digitar expressões matemáticas, incluindo funções como sin, cos, tan, sqrt, log e exp, e a calculadora avaliará e exibirá o resultado.

Nesta versão atualizada, adicionei todas as funções que você forneceu, incluindo:

Funções para operações básicas (soma, subtracao, multiplicacao, divisao)
Funções para potenciação e radiciação (potenciacao, raiz_quadrada, raiz_n_esima)
Funções para funções matemáticas (seno, cosseno, tangente, logaritmo_natural, logaritmo_decimal)
Funções para operações com memória (adicionar_memoria, remover_memoria, consultar_memoria, limpar_memoria)
Funções para integração numérica (integral_numerica)
Funções para derivada numérica (derivada_numerica)

Observe que algumas funções, como integral_numerica e derivada_numerica, exigem a importação de módulos adicionais (scipy.integrate). Você pode precisar instalá-los se ainda não os tiver em seu sistema.
Agora, você pode usar essas funções na sua calculadora de engenharia digitando as expressões correspondentes na área de exibição e pressionando o botão "=".

Nesta versão, adicionei as seguintes funções:

transformada_fourier: Calcula a transformada de Fourier de um sinal.
Funções para cálculos estruturais: momento_fletor, cortante, normal, analise_esforcos_composta, dimensionamento_coluna e calculo_laje. Observe que essas funções estão incompletas e você precisará implementar a lógica específica para cada método de cálculo.
Funções para mecânica dos solos: capacidade_carga_estacas, estabilidade_talude, permeabilidade_solo e recalque_solo. Essas funções também estão incompletas e requerem a implementação da lógica específica.
Funções para hidráulica e saneamento: fluxo_tubulacao, fluxo_canal, dimensionamento_rede_hidraulica, tratamento_agua e tratamento_esgoto. Novamente, essas funções estão incompletas e precisam da implementação da lógica específica.
Funções para topografia: area_terreno, volume_terreno, nivelamento, locacao_obra e curva_nivel. Essas funções também estão incompletas e requerem a implementação da lógica específica.

Lembre-se de implementar a lógica específica para cada função de acordo com as equações, mét


Claro, posso criar uma interface separada para cada função, com uma tela inicial para selecionar a função desejada e, em seguida, exibir uma nova tela com os campos necessários para aquela função específica.
Vou criar um novo arquivo Python chamado calculadora_engenharia_interface.py que será responsável por gerenciar a interface gráfica. Cada função será separada em um módulo Python diferente, e a interface irá importar e utilizar essas funções conforme necessário.
Aqui está o código para calculadora_engenharia_interface.py:

Neste código, criamos uma janela principal usando tk.Tk() e um ttk.Notebook para organizar as diferentes telas. A tela inicial contém botões para selecionar cada função.
Em seguida, criaremos módulos Python separados para cada conjunto de funções. Por exemplo, para as operações básicas, criaremos um arquivo operacoes_basicas.py:

Este módulo contém as funções para operações básicas e uma classe OperacoesBasicasGUI que cria uma nova janela com campos de entrada e botões para realizar cada operação. Quando um botão é pressionado, a função correspondente é chamada, e o resultado é exibido em uma caixa de mensagem.
Você precisará criar módulos semelhantes para as outras funções, como potenciacao_radiciacao.py, funcoes_matematicas.py, memoria.py e integracao_derivacao.py.
Lembre-se de importar esses módulos no arquivo calculadora_engenharia_interface.py e chamar as classes correspondentes nas funções show_*.
Com essa abordagem, você terá uma interface de usuário separada para cada conjunto de funções, mantendo o código organizado e modular.

Nesta versão atualizada, fiz as seguintes alterações:

Adicionei uma função show_splash() para exibir uma tela de inicialização (splash screen) com o símbolo de engenharia antes da janela principal. Essa função cria uma nova janela "Toplevel" sem barra de título, carrega um ícone a partir de um arquivo de imagem (você precisará fornecer o arquivo "engineering_icon.png") e define um atraso de 2 segundos antes de fechar a tela de splash.
Adicionei um ícone personalizado à janela principal carregando o mesmo arquivo de imagem "engineering_icon.png" e configurando-o como o ícone da janela usando root.iconphoto(False, icon).
Configurei o estilo dos botões usando o estilo padrão "TButton" do Tkinter. Personalizei a fonte e o preenchimento dos botões para torná-los mais atrativos.
Criar janelas personalizadas para cada função ficará a cargo dos respectivos módulos operacoes_basicas.py, potenciacao_radiciacao.py, funcoes_matematicas.py, memoria.py e integracao_derivacao.py. Nesses módulos, você pode personalizar a aparência das janelas conforme necessário.

Certifique-se de ter o arquivo de imagem "engineering_icon.png" no mesmo diretório do script Python. Você também precisará instalar a biblioteca Pillow para trabalhar com imagens em Python. Você pode instalá-la usando o pip:

pip install pillow
Com essas alterações, sua calculadora de engenharia terá um ícone personalizado, uma tela de inicialização com o símbolo de engenharia e botões personalizados na tela inicial. Você pode personalizar ainda mais as janelas de cada função nos respectivos módulos.

Nesta versão, fiz as seguintes alterações:

Adicionei uma função show_splash() para exibir uma tela de inicialização (splash screen) com o símbolo de engenharia antes da janela principal.
Carreguei um ícone personalizado a partir de um arquivo de imagem ("engineering_icon.png") e configurei-o como o ícone da janela principal.
Configurei o estilo dos botões usando o estilo padrão "TButton" do Tkinter, personalizando a fonte e o preenchimento.
Modifiquei os comandos dos botões para chamar as funções de criação de janela dos respectivos módulos (operacoes_basicas, potenciacao_radiciacao, etc.) usando lambda para passar a janela principal como argumento.

Para exibir todas as janelas dentro da janela principal e apresentar o resultado na mesma janela de inserção dos dados, você precisará atualizar os módulos individuais (operacoes_basicas.py, potenciacao_radiciacao.py, etc.). Aqui está um exemplo de como atualizar o módulo operacoes_basicas.py:


Nesta versão atualizada do módulo operacoes_basicas.py, fiz as seguintes alterações:

A classe OperacoesBasicasGUI agora recebe a janela principal (parent) como argumento e cria um tk.Frame dentro dessa janela principal.
Os campos de entrada, botões e uma área de exibição de resultado são criados dentro do tk.Frame.
Os métodos realizar_soma, realizar_subtracao, realizar_multiplicacao e realizar_divisao agora chamam uma nova função exibir_resultado para exibir o resultado da operação na área de exibição de resultado.
A função exibir_resultado configura o texto da área de exibição de resultado (self.resultado_label) com o resultado calculado.

Essa abordagem permite que todas as janelas sejam exibidas dentro da janela principal e que o resultado seja apresentado na mesma janela de inserção dos dados.
Você precisará atualizar os outros módulos (potenciacao_radiciacao.py, funcoes_matematicas.py, memoria.py e integracao_derivacao.py) de forma semelhante para exibir suas respectivas interfaces dentro da janela principal e apresentar o resultado na área de exibição correspondente.

Fiz as seguintes alterações no código:

Importei o módulo os para obter o caminho absoluto do diretório atual.
Na função show_splash(), obtive o caminho absoluto do diretório atual usando os.path.dirname(os.path.abspath(__file__)).
Concatenei o caminho absoluto com o nome do arquivo da imagem ("engineering_icon.png") usando os.path.join(current_dir, "engineering_icon.png") para obter o caminho completo da imagem.
Carreguei a imagem usando ImageTk.PhotoImage(Image.open(icon_path)), onde icon_path é o caminho completo da imagem.
Depois de criar o rótulo (icon_label) com a imagem, atribui a referência da imagem a uma variável (icon_label.image = icon) para evitar que ela seja coletada pelo coletor de lixo antes da exibição.
Repeti o mesmo processo para carregar o ícone na janela principal.

Essas alterações garantem que a imagem seja carregada corretamente, independentemente do diretório de trabalho atual. A referência à imagem é mantida para evitar que ela seja coletada pelo coletor de lixo antes da exibição.
Certifique-se de ter o arquivo "engineering_icon.png" no mesmo diretório do script Python. Se a imagem ainda não estiver sendo exibida corretamente, verifique se o caminho e o nome do arquivo estão corretos.

